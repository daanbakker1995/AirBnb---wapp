@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="row flex-fill d-flex">
    <div class="col">
        <div id='map'></div>
    </div>

    <div id="filter" class="col-3 h-100 p-4 bg-secondary bg-opacity-25">
        <div class="col">
            <h3>Filter map results</h3>
        </div>
        <form asp-page="./Index" method="get">
            <div class="form-group">
                <label for="neighbourhoodSelection">Filter by neighbourhood:</label>
                <select name="neighbourhood" class="form-control" id="neighbourhoodSelection" value="@Model.FilterOptions.Neighbourhood">
                    <option>Amsterdam</option>
                    @foreach (var neighbourhood in Model.Neighbourhoods)
                    {
                        <option>@Html.DisplayFor(modelItem => neighbourhood)</option>
                    }
                </select>
            </div>
            <div class="row">
                <div class="form-group col">
                    <label for="MinPrice">Min price:</label>
                    <input type="number" id="MinPrice" name="MinPrice" class="form-control form-control-sm" value="@Model.FilterOptions.MinPrice" />
                </div>
                <div class="form-group col">
                    <label for="MaxPrice">Max price:</label>
                    <input type="number" id="MaxPrice" name="MaxPrice" class="form-control form-control-sm" value="@Model.FilterOptions.MaxPrice" />
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-6">
                    <label for="MinReviews">Min Reviews:</label>
                    <input type="number" id="MinReviews" name="MinReviews" class="form-control form-control-sm" value="@Model.FilterOptions.MinReviews" />
                </div>
                <div class="form-group col-md-6">
                    <label for="MaxReviews">Max Reviews:</label>
                    <input type="number" id="MaxReviews" name="MaxReviews" class="form-control form-control-sm" value="@Model.FilterOptions.MaxReviews" />
                </div>
            </div>
            <div class="form-group pt-2">
                <input type="submit" value="Filter" class="btn btn-primary" />
            </div>
        </form>
    </div>

    <script>
        async function getProperties(id) {
            const response = await fetch("./api/listing/" + id);
            return await response.json();
        }

        mapboxgl.accessToken = 'pk.eyJ1IjoicW91eW0iLCJhIjoiY2thNm44MnV3MDhrdzJybDdyZ25taWZzdiJ9.TeswIM_AHz6PsntAVngmIA';
        var data =
        {
            "type": "FeatureCollection",
            "features": @Html.Raw(Json.Serialize(@Model.GeoData))
        };

        console.log(data);

        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/outdoors-v11',
            zoom: 11,
            center: [4.895168, 52.370216],
        });

        map.addControl(new mapboxgl.NavigationControl());
        map.addControl(new mapboxgl.FullscreenControl());

        map.on('load', function () {
            map.addSource('listings', {
                type: 'geojson',
                data: data,
                cluster: true,
                clusterMaxZoom: 14 // Max zoom to cluster points on
            });

            map.addLayer({
                id: 'clusters',
                type: 'circle',
                source: 'listings',
                filter: ['has', 'point_count'],
                paint: {
                    // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                    // with three steps to implement three types of circles:
                    //   * Blue, 20px circles when point count is less than 100
                    //   * Yellow, 30px circles when point count is between 100 and 750
                    //   * Pink, 40px circles when point count is greater than or equal to 750
                    'circle-color': [
                        'step',
                        ['get', 'point_count'],
                        '#51bbd6',
                        100,
                        '#f1f075',
                        750,
                        '#f28cb1'
                    ],
                    'circle-radius': [
                        'step',
                        ['get', 'point_count'],
                        20,
                        100,
                        30,
                        750,
                        40
                    ]
                }
            });

            map.addLayer({
                id: 'cluster-count',
                type: 'symbol',
                source: 'listings',
                filter: ['has', 'point_count'],
                layout: {
                    'text-field': '{point_count_abbreviated}',
                    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                    'text-size': 12
                }
            });

            map.addLayer({
                id: 'unclustered-point',
                type: 'circle',
                source: 'listings',
                filter: ['!', ['has', 'point_count']],
                paint: {
                    'circle-color': [
                        'match',
                        ['get', 'roomType'],
                        'Entire home/apt',
                        '#ec5342',
                        'Private room',
                        '#54b211',
                        'Shared room',
                        '#3bb2d0',
                        '#ccc' /* Other */
                    ],
                    'circle-radius': 6,
                    'circle-stroke-width': 1,
                    'circle-stroke-color': '#fff'
                }
            });

            map.on('click', 'clusters', (e) => {
                const features = map.queryRenderedFeatures(e.point, {
                    layers: ['clusters']
                });
                const clusterId = features[0].properties.cluster_id;
                map.getSource('listings').getClusterExpansionZoom(
                    clusterId,
                    (err, zoom) => {
                        if (err) return;

                        map.easeTo({
                            center: features[0].geometry.coordinates,
                            zoom: zoom
                        });
                    }
                );
            });

            map.on('click', 'unclustered-point', async (e) => {
                var coordinates = e.features[0].geometry.coordinates.slice();
                var properties = await getProperties(e.features[0].properties.listingId);
                var licenceString = properties.hasLicense ? "Yes" : "No";
                new mapboxgl.Popup().setLngLat(coordinates)
                    .setHTML(
                        '<p><strong>' +
                        '<a target="_blank" href="http://www.airbnb.com/rooms/' + properties.listingId + '">' + properties.name + '</a>' +
                        ' by ' +
                        '<a target="_blank" href="http://www.airbnb.com/users/show/' + properties.hostId + '">' + properties.hostName + '</a>' +
                        ' (' + properties.numberOfReviews + ' reviews)' +
                        '</strong></p>' +
                        '<p>' + properties.roomType + ' in ' + properties.neighbourhood + '</p>' +
                        '<hr>' +
                        '<p>' +
                        'Minimum nights: ' + properties.minimunNights + '<br>' +
                        'Price: ' + properties.price + ' per night' +
                        '</p>'
                    )
                    .addTo(map);
            });

            map.on('mouseenter', 'clusters', () => {
                map.getCanvas().style.cursor = 'pointer';
            });
            map.on('mouseenter', 'unclustered-point', () => {
                map.getCanvas().style.cursor = 'pointer';
            });
            map.on('mouseleave', 'clusters', () => {
                map.getCanvas().style.cursor = '';
            });
            map.on('mouseleave', 'unclustered-point', () => {
                map.getCanvas().style.cursor = '';
            });
        });
    </script>
</div>